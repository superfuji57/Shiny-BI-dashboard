library(shiny)
runApp("enterpriseDash")
View(t_commerce)
unique(t_commerce$name)
hw <- HoltWinters(ldeaths)
hw
predict(hw, n.ahead = input$months,
prediction.interval = TRUE,
level = as.numeric(input$interval))
?dygraph
t_commerce %>% filter(name == "SSO")
x <- t_commerce %>% filter(name == "SSO")
xts(x)
library(xts)
xts(x)
names(x)
xts(x[,7], order.by=x[,1])
xts(x$orders, order.by=x[,1])
runApp("enterpriseDash")
runApp("enterpriseDash")
x
ts.x <- xts(x$orders, order.by=x[,1])
to.period(ts.x, 'months')
to.period(ts.x, 'weeks')
apply.monthly(ts.x, sum)
tsGran <- function(ts, gran="Week") {
if (gran == "Week") {
return(apply.weekly(ts, sum))
} else if (gran == "Day") {
return(ts)
} else if (gran == "Month") {
return(apply.monthly(ts, sum))
}
}
ts.x
tsGran(ts.x, "Month")
runApp("enterpriseDash")
names(t_commerce)
runApp("enterpriseDash")
View(t_commerce)
View(FYTD.commerce)
runApp("enterpriseDash")
FYTD.commerce[, c"Visits"]
FYTD.commerce[, c("Visits")]
FYTD.commerce[, c("Visits", "Revenue")]
FYTD.commerce[, c("Visits", "Revenue", "Yowsers")]
totMetrics <- c("Visits", "Revenue", "PageViews", "Orders", "UniqueVisitors")
perMetrics <- c("Conversion", "Engagement")
names(FYTD.commerce) %in% perMetrics
FYTD.commerce[, names(FYTD.commerce) %in% perMetrics]
FYTD.commerce[, names(FYTD.commerce) %in% perMetrics] <- percent(FYTD.commerce[, names(FYTD.commerce) %in% perMetrics])
sapply(FYTD.commerce[, names(FYTD.commerce) %in% perMetrics], percent)
class(sapply(FYTD.commerce[, names(FYTD.commerce) %in% perMetrics], percent))
apply(FYTD.commerce[, names(FYTD.commerce) %in% perMetrics], percent)
apply(FYTD.commerce[, names(FYTD.commerce) %in% perMetrics],1, percent)
apply(FYTD.commerce[, names(FYTD.commerce) %in% perMetrics],2, percent)
class(apply(FYTD.commerce[, names(FYTD.commerce) %in% perMetrics],1, percent))
apply(FYTD.commerce[, names(FYTD.commerce) %in% totMetrics],1, percent)
apply(FYTD.commerce[, names(FYTD.commerce) %in% totMetrics],2, percent)
apply(FYTD.commerce[, names(FYTD.commerce) %in% totMetrics],2, f2si2)
apply(FYTD.commerce[, names(FYTD.commerce) %in% totMetrics],1, f2si2)
f2si2(FYTD.commerce)
f2si2(FYTD.commerce$Revenue)
f2si2(FYTD.commerce[$Revenue],1)
f2si2(FYTD.commerce[,1)
f2si2(FYTD.commerce[,1])
f2si2(FYTD.commerce[,2])
format(FYTD.commerce, digits=2)
format(FYTD.commerce, format="fg")
?format
format(FYTD.commerce, trim=TRUE)
format(FYTD.commerce, trim=TRUE, digits=2)
library(gridExtra)
grid.table(FYTD.commerce)
library(knitr)
kable(FYTD.commerce)
prettyR <- function(df){
perMetrics <- c("Conversion", "Engagement")
totMetrics <- c("Visits", "Revenue", "PageViews", "Orders", "UniqueVisitors")
decMetrics <- c("Page Views per Visit", "Avg Time Spent")
df[, names(df) %in% perMetrics] <- apply(df[, names(df) %in% perMetrics],1, percent)
}
}
prettyR(FYTD.commerce)
prettyR <- function(df){
perMetrics <- c("Conversion", "Engagement")
totMetrics <- c("Visits", "Revenue", "PageViews", "Orders", "UniqueVisitors")
decMetrics <- c("Page Views per Visit", "Avg Time Spent")
df[, names(df) %in% perMetrics] <- apply(df[, names(df) %in% perMetrics],1, percent)
df
}
prettyR(FYTD.commerce)
prettyR <- function(df){
perMetrics <- c("Conversion", "Engagement")
totMetrics <- c("Visits", "Revenue", "PageViews", "Orders", "UniqueVisitors")
decMetrics <- c("Page Views per Visit", "Avg Time Spent")
df[, names(df) %in% perMetrics] <- apply(df[, names(df) %in% perMetrics],1, percent)
df[, names(df) %in% totMetrics] <- apply(df[, names(df) %in% totMetrics],1, f2si2(rounding=2))
df
}
prettyR(FYTD.commerce)
prettyR <- function(df){
perMetrics <- c("Conversion", "Engagement")
totMetrics <- c("Visits", "Revenue", "PageViews", "Orders", "UniqueVisitors")
decMetrics <- c("Page Views per Visit", "Avg Time Spent")
df[, names(df) %in% perMetrics] <- apply(df[, names(df) %in% perMetrics],1, percent)
df[, names(df) %in% totMetrics] <- apply(df[, names(df) %in% totMetrics],1, function(x) f2si2(x, rounding=2))
df
}
prettyR(FYTD.commerce)
FYTD.commerce$Visits[1]
f2si2(FYTD.commerce$Visits[1], rounding=2)
f2si2(FYTD.commerce$Visits[1], rounding=1)
f2si2(FYTD.commerce$Visits[1], rounding=2)
f2si2(FYTD.commerce$Visits[1], rounding=3)
f2si2(FYTD.commerce$Visits[1], rounding=1)
prettyR <- function(df){
perMetrics <- c("Conversion", "Engagement")
totMetrics <- c("Visits", "Revenue", "PageViews", "Orders", "UniqueVisitors")
decMetrics <- c("Page Views per Visit", "Avg Time Spent")
df[, names(df) %in% perMetrics] <- apply(df[, names(df) %in% perMetrics],1, percent)
df[, names(df) %in% totMetrics] <- apply(df[, names(df) %in% totMetrics],1, function(x) f2si2(x, rounding=1))
df
}
f2si2(FYTD.commerce$Visits[1], rounding=1)
prettyR(FYTD.commerce)
runApp("enterpriseDash")
YOY.commerce <- yoyR2(FYTD.commerce)
View(t_commerce)
View(YOY.commerce)
FYTD.commerce <- t_experienceType %>%
filter(name == "Commerce",
between(datetime, last.year[1], last.year[2]) |
between(datetime, current.year[1], current.year[2])) %>%
group_by(FY) %>%
summarize(Revenue = sum(revenue),
Conversion = sum(orders) / sum(visits),
Visits = sum(visits),
PageViews = sum(pageviews),
Orders = sum(orders),
UniqueVisitors = sum(uniquevisitors),
"Page Views per Visit" = round(sum(pageviews) / sum(visits), 2)) %>%
arrange(desc(FY))
FYTD.content <- t_experienceType %>%
filter(name == "Content",
between(datetime, last.year[1], last.year[2]) |
between(datetime, current.year[1], current.year[2])) %>%
group_by(FY) %>%
summarize(Revenue = sum(revenue),
Conversion = sum(orders) / sum(visits),
Visits = sum(visits),
PageViews = sum(pageviews),
Orders = sum(orders),
UniqueVisitors = sum(uniquevisitors),
"Page Views per Visit" = round(sum(pageviews) / sum(visits), 2)) %>%
arrange(desc(FY))
View(YOY.commerce)
View(FYTD.commerce)
FYTD.commerce <- t_experienceType %>%
filter(name == "Commerce",
between(datetime, last.year[1], last.year[2]) |
between(datetime, current.year[1], current.year[2])) %>%
group_by(FY) %>%
summarize(Revenue = sum(revenue),
Conversion = sum(orders) / sum(visits),
Visits = sum(visits),
PageViews = sum(pageviews),
Orders = sum(orders),
UniqueVisitors = sum(uniquevisitors),
"Page Views per Visit" = round(sum(pageviews) / sum(visits), 2)) %>%
ungroup() %>%
arrange(desc(FY))
View(FYTD.commerce)
FYTD.commerce <- t_experienceType %>%
filter(name == "Commerce",
between(datetime, last.year[1], last.year[2]) |
between(datetime, current.year[1], current.year[2])) %>%
group_by(FY) %>%
summarize(Revenue = sum(revenue),
Conversion = sum(orders) / sum(visits),
Visits = sum(visits),
PageViews = sum(pageviews),
Orders = sum(orders),
UniqueVisitors = sum(uniquevisitors),
"Page Views per Visit" = round(sum(pageviews) / sum(visits), 2)) %>%
arrange(FY)
View(FYTD.commerce)
View(FYTD.commerce)
arrange(FYTD.commerce, FY)
arrange(FYTD.commerce, desc(FY))
?sort
fyz <- c("FY14", "FY15", "FY13")
arrange(fyz)
fyz <- data.frame(c("FY14", "FY15", "FY13"))
fyz
fyz <- data.frame(FYS = c("FY14", "FY15", "FY13"))
fyz
arrange(fyz, FYS)
year(current.year[1])
year(current.year[1])+1
year(current.year[1])+1[2]
as.character(year(current.year[1])+1)
as.character(year(current.year[1])+1)[1:2]
as.character(year(current.year[1])+1)[3]
paste0("FY", year(current.year[1])+1[2])
paste0("FY", as.character(year(current.year[1])+1[2]))
paste0("FY", character(year(current.year[1])+1[2]))
year(current.year[1])+1
class(year(current.year[1])+1)
as.character(year(current.year[1])+1)
FY <- function(date){
if (between(date, current.year[1], current.year[2])){
return(factor(paste0("FY", as.character(year(current.year[1])+1))))
} else if (between(date, last.year[1], last.year[2])) {
return(factor(paste0("FY", as.character(year(last.year[1])+1))))
} else return(factor("Year NA"))
}
t_commerce$FY <- sapply(t_commerce$datetime, FY)
View(t_commerce)
tail(t_commerce)
t_commerce$FY <- sapply(t_commerce$datetime, FY)
t_content$FY <- sapply(t_content$datetime, FY)
t_experienceType$FY <- sapply(t_experienceType$datetime, FY)
save(t_experienceType, t_commerce, t_content, file="./enterpriseDash/data/enterprise.Rda")
runApp("enterpriseDash")
View(YOY.commerce)
runApp("enterpriseDash")
runApp("enterpriseDash")
runApp("enterpriseDash")
View(FYTD.commerce)
View(FYTD.content)
runApp("enterpriseDash")
View(FYTD.commerce)
pretty(FYTD.commerce)
runApp("enterpriseDash")
runApp("enterpriseDash")
t_commerce$datetime[1]
month(t_commerce$datetime[1])
month(t_commerce$datetime[1], label = TRUE)
month(t_commerce$datetime[1], label = TRUE, abbr = FALSE)
month(t_commerce$datetime[1], abbr = FALSE)
month(t_commerce$datetime[1], label = TRUE, abbr = FALSE)
day(t_commerce$datetime[1], label = TRUE, abbr = FALSE)
day(t_commerce$datetime[1])
t_commerce$datetime[length(t_commerce$datetime)]
runApp("enterpriseDash")
runApp("enterpriseDash")
runApp("enterpriseDash")
install.packages("shinyBS")
runApp("enterpriseDash")
library(shinyBS)
shinyBS
?shinyBS
??shinyBS
runApp("enterpriseDash")
devtools::install_github("ebailey78/shinyBS")
runApp("enterpriseDash")
list("bsModal")
library(shinyBS)
runApp("enterpriseDash")
library(shiny)
runApp("enterpriseDash")
?fileReaderData
library(shiny)
?fileReaderData
reactiveFileReader
?reactiveFileReader
runApp("enterpriseDash")
runApp("enterpriseDash")
runApp("enterpriseDash")
runApp("enterpriseDash")
runApp("enterpriseDash")
load("C:/Users/andrewon/Shiny-BI-dashboard/enterpriseDash/data/enterprise.Rda")
source('C:/Users/andrewon/Shiny-BI-dashboard/enterpriseDash/helpers.R', echo=TRUE)
FYTD.commerce <- t_experienceType %>%
filter(name == "Commerce",
between(datetime, last.year[1], last.year[2]) |
between(datetime, current.year[1], current.year[2])) %>%
group_by(FY) %>%
summarize(Revenue = sum(revenue),
Conversion = sum(orders) / sum(visits),
Visits = sum(visits),
PageViews = sum(pageviews),
Orders = sum(orders),
UniqueVisitors = sum(uniquevisitors),
"Page Views per Visit" = round(sum(pageviews) / sum(visits), 2)) %>%
arrange(desc(FY))
FYTD.content <- t_experienceType %>%
filter(name == "Content",
between(datetime, last.year[1], last.year[2]) |
between(datetime, current.year[1], current.year[2])) %>%
group_by(FY) %>%
summarize(Revenue = sum(revenue),
Conversion = sum(orders) / sum(visits),
Visits = sum(visits),
PageViews = sum(pageviews),
Orders = sum(orders),
UniqueVisitors = sum(uniquevisitors),
"Page Views per Visit" = round(sum(pageviews) / sum(visits), 2)) %>%
arrange(desc(FY))
YOY.commerce <- yoyR2(FYTD.commerce)
YOY.content <- yoyR2(FYTD.content)
YOY.commerce$color <- ifelse(YOY.commerce$YOY < 0, "red", "green")
YOY.content$color <- ifelse(YOY.content$YOY < 0, "red", "green")
save(t_experienceType, t_commerce, t_content, FYTD.commerce, FYTD.content, YOY.commerce, YOY.content,
file="./enterpriseDash/data/enterprise.Rda")
runApp("enterprise.Rda")
runApp("enterpriseDash")
runApp("enterpriseDash")
load("C:/Users/andrewon/Shiny-BI-dashboard/enterpriseDash/data/enterprise.Rda")
runApp("enterpriseDash")
load("./data/enterprise.Rda")
load("./enterpriseDash/data/enterprise.Rda")
runApp("enterpriseDash")
View(YOY.content)
YOY.content %>% ggplot(aes(Metrics, YOY, label=Metrics, fill = color)) +
geom_bar(stat = "identity", position="identity") +
geom_text(aes(label = paste0( round(YOY * 100,1), "%"),
hjust = ifelse(YOY >= 0, 0, 1))) +
coord_flip() +
labs(x="", y="") +
ylim(-.5, .5) +
scale_color_fivethirtyeight() +
theme_fivethirtyeight() +
scale_fill_manual(values = c("green" = "chartreuse3", "red" = "firebrick")) +
theme(legend.position = "none",
plot.title = element_text(size=20, lineheight=.8, vjust=1, family = "Garamond"),
axis.text.y=element_text(size = 12, colour="darkblue"))
load("C:/Users/andrewon/Shiny-BI-dashboard/enterpriseDash/data/enterprise.Rda")
YOY.content %>% ggplot(aes(Metrics, YOY, label=Metrics, fill = color)) +
geom_bar(stat = "identity", position="identity") +
geom_text(aes(label = paste0( round(YOY * 100,1), "%"),
hjust = ifelse(YOY >= 0, 0, 1))) +
coord_flip() +
labs(x="", y="") +
ylim(-.5, .5) +
scale_color_fivethirtyeight() +
theme_fivethirtyeight() +
scale_fill_manual(values = c("green" = "chartreuse3", "red" = "firebrick")) +
theme(legend.position = "none",
plot.title = element_text(size=20, lineheight=.8, vjust=1, family = "Garamond"),
axis.text.y=element_text(size = 12, colour="darkblue"))
runApp("enterpriseDash")
wrong <- c(3, 6, 7, 5, 1, 2, 9, 8)
right <- c(4, 10, 2, 6, 1, 5, 9, 3)
length(wrong)
length(right)
